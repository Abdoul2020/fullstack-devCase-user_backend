openapi: 3.0.3
info:
  title: Konya Task API
  description: A comprehensive user management API with authentication and authorization
  version: 1.0.0
  contact:
    name: API Support
    email: support@konyatask.com
servers:
  - url: http://localhost:3001/api/v1
    description: Development server
  - url: https://your-production-domain.com/api/v1
    description: Production server

security:
  - BearerAuth: []

paths:
  /auth/health:
    get:
      tags:
        - Authentication
      summary: Health check for auth service
      description: Check if the authentication service is running
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Auth service is healthy
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00.000Z"

  /auth/signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userType
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
              properties:
                userType:
                  type: string
                  enum: ['1', '2']
                  description: User type (1 = Regular User, 2 = Premium User)
                  example: "1"
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "John"
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "Doe"
                email:
                  type: string
                  format: email
                  maxLength: 100
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  maxLength: 100
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
                  description: Password must contain at least one lowercase letter, one uppercase letter, and one number
                  example: "Password123"
                confirmPassword:
                  type: string
                  minLength: 8
                  example: "Password123"
                isActive:
                  type: boolean
                  default: true
                  example: true
                avatarUrl:
                  type: string
                  format: uri
                  example: "https://example.com/avatar.jpg"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User created successfully
                  data:
                    $ref: '#/components/schemas/UserWithToken'
        '400':
          description: Bad request - validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and get access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  example: "Password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User logged in successfully
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of all users (Admin only)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of users per page
        - name: search
          in: query
          schema:
            type: string
          description: Search by first name, last name, or email
        - name: isActive
          in: query
          schema:
            type: boolean
          description: Filter by active status
        - name: createdBy
          in: query
          schema:
            type: integer
          description: Filter by creator ID
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      totalCount:
                        type: integer
                        example: 25
                      currentPage:
                        type: integer
                        example: 1
                      totalPages:
                        type: integer
                        example: 3
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Users
      summary: Create new user
      description: Create a new user account (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userType
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
              properties:
                userType:
                  type: string
                  enum: ['1', '2']
                  example: "1"
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "Jane"
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "Smith"
                email:
                  type: string
                  format: email
                  maxLength: 100
                  example: "jane.smith@example.com"
                password:
                  type: string
                  minLength: 8
                  maxLength: 100
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
                  example: "Password123"
                confirmPassword:
                  type: string
                  minLength: 8
                  example: "Password123"
                isActive:
                  type: boolean
                  default: true
                  example: true
                avatarUrl:
                  type: string
                  format: uri
                  example: "https://example.com/avatar.jpg"
                createdBy:
                  type: integer
                  example: 1
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User created successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Get the profile of the currently authenticated user
      responses:
        '200':
          description: Current user profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Users
      summary: Update current user profile
      description: Update the profile of the currently authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "John"
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "Doe"
                email:
                  type: string
                  format: email
                  maxLength: 100
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  maxLength: 100
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
                  example: "NewPassword123"
                confirmPassword:
                  type: string
                  minLength: 8
                  example: "NewPassword123"
                avatarUrl:
                  type: string
                  format: uri
                  example: "https://example.com/new-avatar.jpg"
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Profile updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by ID (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    patch:
      tags:
        - Users
      summary: Update user
      description: Update a specific user (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userType:
                  type: string
                  enum: ['1', '2']
                  example: "2"
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "Jane"
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 50
                  pattern: '^[a-zA-Z\s]+$'
                  example: "Smith"
                email:
                  type: string
                  format: email
                  maxLength: 100
                  example: "jane.smith@example.com"
                password:
                  type: string
                  minLength: 8
                  maxLength: 100
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)'
                  example: "NewPassword123"
                confirmPassword:
                  type: string
                  minLength: 8
                  example: "NewPassword123"
                isActive:
                  type: boolean
                  example: true
                avatarUrl:
                  type: string
                  format: uri
                  example: "https://example.com/avatar.jpg"
                createdBy:
                  type: integer
                  example: 1
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User updated successfully
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Soft delete a specific user (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/activate:
    patch:
      tags:
        - Users
      summary: Activate user
      description: Activate a specific user (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User activated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User activated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}/deactivate:
    patch:
      tags:
        - Users
      summary: Deactivate user
      description: Deactivate a specific user (Admin only)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: User deactivated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userType:
          type: string
          enum: ['0', '1', '2']
          description: User type (0 = Admin, 1 = Regular User, 2 = Premium User)
          example: "1"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        isActive:
          type: boolean
          example: true
        avatarUrl:
          type: string
          format: uri
          nullable: true
          example: "https://example.com/avatar.jpg"
        createdBy:
          type: integer
          nullable: true
          example: 1
        creator:
          type: object
          nullable: true
          properties:
            id:
              type: integer
              example: 1
            firstName:
              type: string
              example: "Admin"
            lastName:
              type: string
              example: "User"
            email:
              type: string
              example: "admin@example.com"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000Z"

    UserWithToken:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: "Error message describing what went wrong"
        statusCode:
          type: integer
          example: 400
        isOperational:
          type: boolean
          example: true

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User management operations
